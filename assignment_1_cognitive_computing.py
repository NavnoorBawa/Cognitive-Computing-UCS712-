# -*- coding: utf-8 -*-
"""Assignment 1 Cognitive Computing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HPztm9F3zFTeOwcYqRZxGZiefb0_3zuc

***Q1***
"""

print("Power is a lot like real estate. It's all about location, location, location. The closer you are to the source, the higher your property value")

"""***Q2.1***"""

num1=10
num2=20
sum_r=num1+num2
print(f"{sum_r}")

"""***Q2.2***"""

str1="Navnoor"
str2="Bawa"
result=str1+" "+str2
print(f"{result}")

"""***Q2.3***"""

name="Python"
version=3.9
result=f"{name} version {version}"
print(result)

"""***Q3.1***"""

def check_number(num):
  if num>0:
    print(f"{num} is positive")
  elif num<0:
    print(f"{num} is negative")
  else:
    print(f"{num} is zero")

check_number(-5)

"""***Q3.2***"""

def check_odd_even(num):
  if num%2==0:
    print(f"{num} is even ")
  else:
    print(f"{num} is odd")
check_odd_even(7)

"""***Q4.1***"""

for i in range(1, 11):
    print(i, end=" ")

"""***Q4.2***"""

count =1
while count<=10:
  print(count,end=" ")
  count+=1

"""***Q4.3***"""

del sum
sum_result=sum(range(1,101))
sum_result

"""***Q5.1***"""

numbers=[5,8,9,3,4]
print(f"Largest number:{max(numbers)}")

"""***Q5.2***"""

President={"name":"Trump","age":78,"country":"USA"}
print(f"Age:{President['age']}")

"""***Q5.3***"""

del numbers
numbers=[5,8,3,4,9]
sort_asc=sorted(numbers)
sort_desc=sorted(numbers,reverse= True)
print(f"Ascending: {sort_asc}")
print(f"Descending: {sort_desc}")

"""***Q5.4***"""

dict1={"a":1,"b":2}
dict2={"c":3,"d":4}
mereg_dict={**dict1,**dict2}
print(f"merged dict:{mereg_dict}")

"""***Q6.1***"""

def count_vowels(string):
  vowels="aeiouAEIOU"
  count=0
  for char in string:
    if char in vowels:
      count += 1
  return count

text="Navnoor"
print(f"Number of vowels:{count_vowels(text)}")

"""***Q6.2***"""

def reverse_string(string):
  return string[::-1]
text="Navnoor"
print(f"Reversed string:{reverse_string(text)}")

"""***Q6.3***"""

def is_palindrome(string):
  clean_str=string.lower().replace(" ","")
  return clean_str==clean_str[::-1]
text1="Navnoor"
print(f"palindrome:{is_palindrome(text1)}")
text2="nurses run"
print(f"palindrome:{is_palindrome(text2)}")

"""***Q7.1***"""

def write_and_read():
  file=open("test.txt","w")
  file.write("Hello World\nThis is a test file.")
  file.close()

  file=open("test.txt","r")
  content=file.read()
  print(content)
  file.close()

write_and_read()

"""***Q7.2***"""

def append_to_file():
  file=open("test.txt","a")
  file.write("\nNew line added")
  file.close()

  file = open("test.txt","r")
  print(file.read())
  file.close()

append_to_file()

"""***Q7.3***"""

def count_lines():
  file=open("test.txt","r")
  lines =file.readlines()
  file.close()
  return len(lines)

print(f"Number of lines: {count_lines()}")

"""***Q8.1***"""

def safe_divsion(a,b):
  try:
      result=a/b
      return result;
  except ZeroDivisionError:
      return "Error: Division by zero"

print(safe_divsion(10,0))
print(safe_divsion(10,1))

"""***Q8.2***"""

def get_number():
  try:
    num=int(input("Enter a number:"))
    return num
  except ValueError:
    return "invalid input.please enter a number"

print(get_number())

"""***Q8.3***"""

def file_handling_with_finally():
  file=None
  try:
    file=open("nav.txt","r")
    content=file.read()
    return content
  except FileNotFoundError:
    return "File not found"
  finally:
    if file:
      file.close()
      print("file closed successfully")

file_handling_with_finally()

"""***Q9.1***"""

import random
import string

def generate_random_numbers():
  return [random.randint(1,100) for _ in range(5)]

generate_random_numbers()

"""***Q9.2***"""

def is_prime(n):
  if n<2:
    return False
  for i in range(2,n):
    if n%i==0:
      return False
  return True

def random_prime_check():
  num=random.randint(1,100)
  if is_prime(num):
    return f"Number {num} is prime "
  else:
    return f"Number {num} is not prime"

random_prime_check()

"""***Q9.3***"""

def roll_die():
  return random.randint(1,6)
roll_die()

"""***Q9.4***"""

def shuffle_list(list):
  random.shuffle(list)
  return list

list=[1,2,3,4,5]
shuffled_list=shuffle_list(list)
shuffled_list

"""***Q9.5***"""

def random_list(list):
  return random.choice(list)
list2=[5,7,8,9]
random_list(list2)

"""***Q9.6***"""

def generate_password(length=7):
  characters=string.ascii_letters+string.digits+string.punctuation
  return''.join(random.choice(characters) for _ in range(length))

generate_password()

"""***Q9.8***"""

def pick_random_card():
  suits=['Hearts','Diamonds','Clubs','Spades']
  ranks=['2','3','4','5','6','7','8','9','10','J','Q','K','A']
  return random.choice(suits),random.choice(ranks)
pick_random_card()

"""***Q10.1***"""

import sys

def add_numbers_cli():
  if len(sys.argv)!=3:
    return "PLease provide two numbers"
  try:
    num1=float(sys.argv[1])
    num2=float(sys.argv[2])
    return num1+num2
  except ValueError:
    return "Invalid input.Please provide valid numbers"

add_numbers_cli()

"""***Q10.2***"""

def string_length_cli():
  if len(sys.argv)!=2:
    return "Please provide a string"
  return len(sys.argv[1])

string_length_cli()

"""***11.1***"""

import math
from datetime import datetime
import os

def calculate_sqrt(number):
  return math.sqrt(number)

calculate_sqrt(49)

"""***Q11.2***"""

import pytz
def current_datetime():

  tz = pytz.timezone('Asia/Kolkata')
  now=datetime.now(tz)
  return now.strftime("%d-%m-%Y %H:%M:%S")
current_datetime()

"""***Q11.3***"""

def list_files():
  return os.listdir('.')
list_files()